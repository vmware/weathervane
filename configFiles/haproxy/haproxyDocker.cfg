#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    pidfile     /var/run/haproxy.pid
    maxconn	1000

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    option                  dontlognull
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          2m
    timeout client-fin      10s
    timeout server          2m
    timeout http-keep-alive 10s
    timeout check           10s
    timeout tunnel 			15m
    maxconn	1000

#---------------------------------------------------------------------
# listen for stats traffic
#---------------------------------------------------------------------
listen stats
	   bind *:10080
       balance
       mode http
       stats enable
       stats refresh 10s
       stats uri /stats
       stats auth admin:admin
       stats admin if TRUE

frontend http_frontend
       bind *:80
       mode tcp
       default_backend http_web_server


frontend https_frontend
       bind *:443 
       mode tcp
       default_backend https_web_server

backend http_web_server
	mode tcp
	balance leastconn

    server web1 192.168.1.43:80 check
    server web2 192.168.1.44:80 check

backend https_web_server
    mode tcp
    balance leastconn

	# maximum SSL session ID length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m

    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello

    # SSL session ID (SSLID) may be present on a client or server hello.
    # Its length is coded on 1 byte at offset 43 and its value starts
    # at offset 44.

    # Match and learn on request if client hello.
    stick on payload_lv(43,1) if clienthello

    # Learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    server web1 192.168.1.43:443 check
    server web2 192.168.1.44:443 check
