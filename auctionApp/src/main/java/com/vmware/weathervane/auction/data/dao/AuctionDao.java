/*
Copyright 2017-2019 VMware, Inc.
SPDX-License-Identifier: BSD-2-Clause
*/
package com.vmware.weathervane.auction.data.dao;

import java.util.Date;
import java.util.List;

import com.vmware.weathervane.auction.data.model.Auction;
import com.vmware.weathervane.auction.data.model.Item;

public interface AuctionDao extends GenericDao<Auction, Long> {

	Long getCountWithState(Auction.AuctionState state);

	Long getItemCountforAuction(Auction theAuction);
	List<Item> getItemPageForAuction(Auction theAuction, int page, int pageSize);

	List<Auction> getAuctionsToStart(Date endTime);
	List<Item> getItemsForAuction(Long auctionId);
	Item getFirstItem(Auction theAuction);
	Item getNextItem(Auction theAuction, Long itemId);
	List<Auction> getActiveAuctions();
	Long countActiveAuctions();
	List<Auction> getAuctionsPage(int page, int pageSize, Auction.AuctionState state);

	Auction addAuctionForAuctioneer(Auction anAuction, Long userId);

	/*
	 * These methods are all used by the benchmark infrastructure, and not
	 * by the Auction application
	 */
	Long countByCurrent(Boolean current);
	Long countByCurrentAndActivated(Boolean current, Boolean activated);
	
	List<Auction> findByCurrent(Boolean current, int numDesired);
	List<Auction> findByCurrentAndActivated(Boolean current, Boolean activated);
			
	/**
	 * This method prepares an auction to be used in the next benchmark run by 
	 * setting its startTime to the time at which all runs start. It is assumed
	 * that the auction is in the non-activated state generated by the DBLoader
	 * and reset by DBPrep
	 * 
	 * @param auction
	 */
	void setToActivated(Auction auction);

	Item getNextUnsoldItem(Auction theAuction);

	void resetItemsToFuture(Long auctionId);

	void resetToFuture(Auction auction);

	
}
